//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Wed Aug 20 16:04:40 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// execute                        O    32
// RDY_execute                    O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// execute_op                     I     4
// execute_a                      I    32
// execute_b                      I    32
// EN_execute                     I     1 unused
//
// Combinational paths from inputs to outputs:
//   (execute_op, execute_a, execute_b) -> execute
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkALU(CLK,
	     RST_N,

	     execute_op,
	     execute_a,
	     execute_b,
	     EN_execute,
	     execute,
	     RDY_execute);
  input  CLK;
  input  RST_N;

  // actionvalue method execute
  input  [3 : 0] execute_op;
  input  [31 : 0] execute_a;
  input  [31 : 0] execute_b;
  input  EN_execute;
  output [31 : 0] execute;
  output RDY_execute;

  // signals for module outputs
  reg [31 : 0] execute;
  wire RDY_execute;

  // remaining internal signals
  reg [31 : 0] IF_execute_op_EQ_0_THEN_execute_a_PLUS_execute_ETC___d34,
	       IF_execute_op_EQ_2_THEN_execute_a_AND_execute__ETC___d42,
	       IF_execute_op_EQ_5_4_THEN_execute_a_SL_execute_ETC___d51,
	       IF_execute_op_EQ_8_2_THEN_IF_execute_a_SLT_exe_ETC___d58;

  // actionvalue method execute
  always@(execute_op or
	  IF_execute_op_EQ_0_THEN_execute_a_PLUS_execute_ETC___d34 or
	  IF_execute_op_EQ_2_THEN_execute_a_AND_execute__ETC___d42 or
	  IF_execute_op_EQ_5_4_THEN_execute_a_SL_execute_ETC___d51 or
	  IF_execute_op_EQ_8_2_THEN_IF_execute_a_SLT_exe_ETC___d58)
  begin
    case (execute_op)
      4'd0, 4'd1:
	  execute = IF_execute_op_EQ_0_THEN_execute_a_PLUS_execute_ETC___d34;
      4'd2, 4'd3, 4'd4:
	  execute = IF_execute_op_EQ_2_THEN_execute_a_AND_execute__ETC___d42;
      4'd5, 4'd6, 4'd7:
	  execute = IF_execute_op_EQ_5_4_THEN_execute_a_SL_execute_ETC___d51;
      4'd8, 4'd9:
	  execute = IF_execute_op_EQ_8_2_THEN_IF_execute_a_SLT_exe_ETC___d58;
      default: execute = 32'd0;
    endcase
  end
  assign RDY_execute = 1'd1 ;

  // remaining internal signals
  always@(execute_op or execute_a or execute_b)
  begin
    case (execute_op)
      4'd8:
	  IF_execute_op_EQ_8_2_THEN_IF_execute_a_SLT_exe_ETC___d58 =
	      ((execute_a ^ 32'h80000000) < (execute_b ^ 32'h80000000)) ?
		32'd1 :
		32'd0;
      4'd9:
	  IF_execute_op_EQ_8_2_THEN_IF_execute_a_SLT_exe_ETC___d58 =
	      (execute_a < execute_b) ? 32'd1 : 32'd0;
      default: IF_execute_op_EQ_8_2_THEN_IF_execute_a_SLT_exe_ETC___d58 =
		   32'd0;
    endcase
  end
  always@(execute_op or execute_a or execute_b)
  begin
    case (execute_op)
      4'd5:
	  IF_execute_op_EQ_5_4_THEN_execute_a_SL_execute_ETC___d51 =
	      execute_a << execute_b[4:0];
      4'd6:
	  IF_execute_op_EQ_5_4_THEN_execute_a_SL_execute_ETC___d51 =
	      execute_a >> execute_b[4:0];
      4'd7:
	  IF_execute_op_EQ_5_4_THEN_execute_a_SL_execute_ETC___d51 =
	      execute_a >> execute_b[4:0] |
	      ~(32'hFFFFFFFF >> execute_b[4:0]) & {32{execute_a[31]}};
      default: IF_execute_op_EQ_5_4_THEN_execute_a_SL_execute_ETC___d51 =
		   32'd0;
    endcase
  end
  always@(execute_op or execute_a or execute_b)
  begin
    case (execute_op)
      4'd0:
	  IF_execute_op_EQ_0_THEN_execute_a_PLUS_execute_ETC___d34 =
	      execute_a + execute_b;
      4'd1:
	  IF_execute_op_EQ_0_THEN_execute_a_PLUS_execute_ETC___d34 =
	      execute_a - execute_b;
      default: IF_execute_op_EQ_0_THEN_execute_a_PLUS_execute_ETC___d34 =
		   32'd0;
    endcase
  end
  always@(execute_op or execute_a or execute_b)
  begin
    case (execute_op)
      4'd2:
	  IF_execute_op_EQ_2_THEN_execute_a_AND_execute__ETC___d42 =
	      execute_a & execute_b;
      4'd3:
	  IF_execute_op_EQ_2_THEN_execute_a_AND_execute__ETC___d42 =
	      execute_a | execute_b;
      4'd4:
	  IF_execute_op_EQ_2_THEN_execute_a_AND_execute__ETC___d42 =
	      execute_a ^ execute_b;
      default: IF_execute_op_EQ_2_THEN_execute_a_AND_execute__ETC___d42 =
		   32'd0;
    endcase
  end

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (EN_execute && execute_op != 4'd0 && execute_op != 4'd1 &&
	execute_op != 4'd2 &&
	execute_op != 4'd3 &&
	execute_op != 4'd4 &&
	execute_op != 4'd5 &&
	execute_op != 4'd6 &&
	execute_op != 4'd7 &&
	execute_op != 4'd8 &&
	execute_op != 4'd9)
      $display("Error: Invalid ALUOp %0s", execute_op);
  end
  // synopsys translate_on
endmodule  // mkALU
